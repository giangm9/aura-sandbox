import json, bpy, pprint
osm_data = {
    "NOTE": "This file is generated by Blender. Do not edit this file manually.",
    "id": "osm",
    "name": "osm",
    "occlusion":[],
    "map":[]
}
building_data = {
    "NOTE": "This file is generated by Blender. Do not edit this file manually.",
    "id": "WM",
    "name": "WM",
    "floors":[]
}
entryData = {
    "NOTE": "This file is generated by Blender. Do not edit this file manually.",
    "name": "WM",
    "version": "1.0",
    "startBuildingId": "WM",
    "environment": {"skybox": "skybox.hdr"},
    "buildings": [["WM", "/glb/WM.glb", "/json/WM.json"]],
    "neighborhood":[["osm","/glb/osm.glb", "/json/osm.json"]]
}
camera = bpy.data.objects["ProjectStart"]

entryData["startCameraPosition"] = [
    camera.location.x,
    camera.location.z,
    -camera.location.y,
]
entry_path = bpy.path.abspath("//../public/json/entry.json")
with open(entry_path, "w") as file:
    json.dump(entryData, file, indent=4)

def exportGLB(name):
    builing_glb_path = bpy.path.abspath(f"//../public/glb/{name}.glb")
    bpy.ops.export_scene.gltf(
        filepath=builing_glb_path,
        export_format="GLB",
        use_selection=True
    )
    ShowMessageBox(message=buildings)

def ShowMessageBox(message = "", title = "Output GLB Success!", icon = 'INFO'):

    def draw(self, context):
        self.layout.label(text="Export file list")
        for conted, mes in enumerate(message,start=1):
            self.layout.label(text=str(conted) + "_" + mes.name)

    bpy.context.window_manager.popup_menu(draw, title = title, icon = icon)

def parseBuilding(buildings,idx,start_camera):
    for floor in buildings[idx].children:
    
        if not floor.name.startswith(f"{buildings[0].name}_F"):
            break

        
        floor_data = {
            "id": floor.name,
            "name": floor.name.replace(f"{buildings[0].name}_F", "Floor_"),
            "facade": f"{floor.name}_Facade",
            "proxy": f"{floor.name}_Proxy",
        }
        units = []

        for unit in floor.children:
            cover_name = f"{unit.name}_Cover"
            if bpy.data.objects.get(cover_name):
                unit_data = [
                    unit.name,
                    unit.name.replace(f"{buildings[0].name}_F{floor.name}_", ""),
                    cover_name,
                ]
                
                units.append(unit_data)
                floor_data["units"] = units
                building_data["floors"].append(floor_data)

    if(idx==len(buildings)-1):
        building_data["startCameraPosition"] = [
            start_camera.location.x,
            start_camera.location.z,
            -start_camera.location.y,
        ]
        exportGLB("WM")
        building_data_path = bpy.path.abspath(f"//../public/json/WM.json")
        with open(building_data_path, "w") as file:
                json.dump(building_data, file, indent=2)

def parseOSM(buildings,idx):
    if("occlusion" in buildings[idx].name):
        osm_data["occlusion"].append(buildings[idx].name.replace('.',''))
    else:
        osm_data["map"].append(buildings[idx].name)
    if(idx==len(buildings)-1):
        
        exportGLB("osm")
        building_data_path = bpy.path.abspath(f"//../public/json/osm.json")
        with open(building_data_path, "w") as file:
            json.dump(osm_data, file, indent=2)

buildings = bpy.context.selected_objects

for idx in range(len(buildings)):
    if(buildings[0].name != "WM"):
        parseOSM(buildings,idx) 
    else:
        if buildings[idx].name == buildings[0].name+"_Start" :
            start_camera =buildings[idx]
        
        parseBuilding(buildings,idx,start_camera)
       

        
            

