import importlib
import json, bpy, pprint


import lib.utils as utils

# Reload modules
importlib.reload(utils)


abspath = bpy.path.abspath

# TODO:
# - Multiple buildings

PROJECT_NAME = "WM"
WM_FLOOR_NAMES = ["Bottom", "3", "4", "5", "6", "7", "8", "Top"]


JSON_DIR = "//../public/json/"
GLB_DIR = "//../public/glb/"


entry_json = {
    "NOTE": "This file is generated by Blender. Do not edit this file manually.",
    "name": PROJECT_NAME,
    "version": "1.0",
    "startBuilding": "WM",
    "environment": {"skybox": "skybox.hdr"},
}
camera = bpy.data.objects["CameraStart"]

entry_json["cameraStart"] = [
    camera.location.x,
    camera.location.z,
    -camera.location.y,
]

entry_json["street"] = [
    "/json/WM_street.json",
    "/glb/WM_street.glb",
]

entry_json_path = abspath(f"{JSON_DIR}/{PROJECT_NAME}_entry.json")

buildings = ["WM"]
# Export entry data

for building_id in buildings:
    entry_json["buildings"] = [
        [
            building_id,
            f"/json/{PROJECT_NAME}_building_{building_id}.json",
            f"/glb/{PROJECT_NAME}_building_{building_id}.glb",
        ]
    ]
print(f"Export entry data to {entry_json_path}")
with open(entry_json_path, "w") as file:
    json.dump(entry_json, file, indent=2)


# Export street data
street_data = {}

for building_id in buildings:
    neighbor_parents = bpy.data.objects[building_id + "_neighbors"]
    street_data[building_id] = []
    for child in neighbor_parents.children:
        street_data[building_id].append(child.name)

street_json_path = abspath(f"{JSON_DIR}/{PROJECT_NAME}_street.json")

with open(street_json_path, "w") as file:
    json.dump(street_data, file, indent=4)
street_glb_path = abspath(f"{GLB_DIR}/{PROJECT_NAME}_street.glb")

bpy.ops.object.select_all(action="DESELECT")

utils.select_object_recursive(bpy.data.objects["Street"])

bpy.ops.export_scene.gltf(
    filepath=street_glb_path, export_format="GLB", use_selection=True
)


# Export building(s) data

for building_id in buildings:
    building_data = [
        building_id,  # id
        building_id,  # name
    ]

    center_object = bpy.data.objects[f"{building_id}_Center"]
    building_data.append(
        [
            center_object.location.x,
            center_object.location.z,
            -center_object.location.y,
        ]
    )

    start_camera = bpy.data.objects[f"{building_id}_Start"]
    building_data.append(
        [
            start_camera.location.x,
            start_camera.location.z,
            -start_camera.location.y,
        ]
    )
    building = bpy.data.objects[building_id]
    floors = []

    floor_names = list(
        map(
            lambda name: f"{building_id}_F{name}",
            WM_FLOOR_NAMES,
        )
    )

    for name in floor_names:
        floor = bpy.data.objects.get(name)
        floor_data = [
            floor.name,
            floor.name.replace(f"{building_id}_F", "Floor_"),
            f"{floor.name}_Facade",
            f"{floor.name}_Proxy",
        ]

        units = []

        for unit in floor.children:
            cover_name = f"{unit.name}_Cover"
            if bpy.data.objects.get(cover_name):
                unit_data = [
                    unit.name,
                    unit.name.replace(f"{building_id}_F{floor.name}_", ""),
                    cover_name,
                ]
                units.append(unit_data)

        floor_data.append(units)

        # building_data["floors"].append(floor_data)
        floors.append(floor_data)

    building_data.append(floors)

    building_json_path = bpy.path.abspath(
        f"{JSON_DIR}/{PROJECT_NAME}_building_{building_id}.json"
    )

    with open(building_json_path, "w") as file:
        json.dump(building_data, file, indent=2)

    builing_glb_path = bpy.path.abspath(
        f"//../public/glb/{PROJECT_NAME}_building_{building_id}.glb"
    )

    bpy.ops.object.select_all(action="DESELECT")
    utils.select_object_recursive(building)

    bpy.ops.export_scene.gltf(
        filepath=builing_glb_path,
        export_format="GLB",
        use_selection=True,
        export_apply=True,
    )
